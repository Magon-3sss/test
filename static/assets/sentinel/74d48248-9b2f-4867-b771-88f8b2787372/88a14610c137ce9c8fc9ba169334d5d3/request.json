{
    "headers": {
        "accept": "image/png",
        "content-type": "application/json"
    },
    "payload": {
        "evalscript": "\n           function setup() {\n  return {\n\t//List of all bands, that will be used in the script, either for visualization or for choosing best pixel\n    input: [{\n      bands: [\n         \"B04\",\n         \"B08\"\n      ]\n    }],\n\t//This can always be the same if one is doing RGB images\n    output: { bands: 4 },\n    mosaicking: \"ORBIT\"\n  }\n}\n\n/*\nIn this function we limit the scenes, which are used for processing. \nThese are based also on input variables. \nE.g. if one sets date \"2017-03-01\" (\"TO date\") and cloud coverage filter 30%, \nall scenes older than 2017-03-01 with cloud coverage 30% will be checked against\nfurther conditions in this function.\nThe more scenes there are, longer it will take to process the data.\nAfter 60 seconds of processing, there will be a timeout.\n*/\n\nfunction preProcessScenes (collections) {\n    collections.scenes.orbits = collections.scenes.orbits.filter(function (orbit) {\n        var orbitDateFrom = new Date(orbit.dateFrom)\n        return orbitDateFrom.getTime() >= (collections.to.getTime()-3*31*24*3600*1000);\n    })\n    return collections\n}\n\nfunction calcNDVI(sample) {\n  var denom = sample.B04+sample.B08;\n  return ((denom!=0) ? (sample.B08-sample.B04) / denom : 0.0);\n}\nfunction evaluatePixel(samples) {  \n  var max = 0;\n  for (var i=0;i<samples.length;i++) {\n      var ndvi = calcNDVI(samples[i]);\n    max = ndvi > max ? ndvi:max;\n  }\nif (max<-1.1) return [0,0,0];\nelse if (max<-0.2) return [0.75,0.75,0.75];\nelse if (max<-0.1) return [0.86,0.86,0.86];\nelse if (max<0) return [1,1,0.88];\nelse if (max<0.025) return [1,0.98,0.8];\nelse if (max<0.05) return [0.93,0.91,0.71];\nelse if (max<0.075) return [0.87,0.85,0.61];\nelse if (max<0.1) return [0.8,0.78,0.51];\nelse if (max<0.125) return [0.74,0.72,0.42];\nelse if (max<0.15) return [0.69,0.76,0.38];\nelse if (max<0.175) return [0.64,0.8,0.35];\nelse if (max<0.2) return [0.57,0.75,0.32];\nelse if (max<0.25) return [0.5,0.7,0.28];\nelse if (max<0.3) return [0.44,0.64,0.25];\nelse if (max<0.35) return [0.38,0.59,0.21];\nelse if (max<0.4) return [0.31,0.54,0.18];\nelse if (max<0.45) return [0.25,0.49,0.14];\nelse if (max<0.5) return [0.19,0.43,0.11];\nelse if (max<0.55) return [0.13,0.38,0.07];\nelse if (max<0.6) return [0.06,0.33,0.04];\nelse return [0,0.27,0];\n\n}\n\n        ",
        "input": {
            "bounds": {
                "bbox": [
                    9.332006,
                    36.328126,
                    9.338057,
                    36.334142
                ],
                "geometry": {
                    "coordinates": [
                        [
                            [
                                9.334409,
                                36.334142
                            ],
                            [
                                9.334409,
                                36.334142
                            ],
                            [
                                9.338057,
                                36.332085
                            ],
                            [
                                9.338057,
                                36.332085
                            ],
                            [
                                9.337285,
                                36.330615
                            ],
                            [
                                9.337285,
                                36.330615
                            ],
                            [
                                9.336898,
                                36.329561
                            ],
                            [
                                9.336898,
                                36.329561
                            ],
                            [
                                9.336362,
                                36.328126
                            ],
                            [
                                9.336362,
                                36.328126
                            ],
                            [
                                9.332006,
                                36.331151
                            ],
                            [
                                9.332006,
                                36.331151
                            ],
                            [
                                9.332693,
                                36.331998
                            ],
                            [
                                9.332693,
                                36.331998
                            ],
                            [
                                9.333315,
                                36.332932
                            ],
                            [
                                9.333315,
                                36.332932
                            ],
                            [
                                9.334409,
                                36.334142
                            ]
                        ]
                    ],
                    "type": "Polygon"
                },
                "properties": {
                    "crs": "http://www.opengis.net/def/crs/EPSG/0/4326"
                }
            },
            "data": [
                {
                    "dataFilter": {
                        "timeRange": {
                            "from": "2024-03-02T00:00:00Z",
                            "to": "2024-03-02T23:59:59Z"
                        }
                    },
                    "type": "sentinel-2-l2a"
                }
            ]
        },
        "output": {
            "height": 512,
            "responses": [
                {
                    "format": {
                        "type": "image/png"
                    },
                    "identifier": "default"
                }
            ],
            "width": 512
        }
    },
    "timestamp": "2024-11-04T16:46:34.946138",
    "url": "https://services.sentinel-hub.com/api/v1/process"
}